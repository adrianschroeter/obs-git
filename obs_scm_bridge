#!/usr/bin/python3
# -*- coding: utf-8 -*-

# scm (only git atm) cloning and packaging for Open Build Service
# 
# (C) 2021 by Adrian Schr√∂ter <adrian@suse.de>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# See http://www.gnu.org/licenses/gpl-2.0.html for full license text.

import argparse
import os
import re
import shutil
import sys
import logging
import subprocess

outdir = None
download_assets = '/usr/lib/build/download_assets'
export_debian_orig_from_git = '/usr/lib/build/export_debian_orig_from_git'
pack_directories = False

if os.environ.get('DEBUG_SET_VERSION') == "1":
    logging.getLogger().setLevel(logging.DEBUG)
if os.environ.get('OBS_SERVICE_DAEMON'):
    pack_directories = True

class ObsGit(object):
    def __init__(self, outdir, url, revision=None):
        self.outdir   = outdir
        self.url      = url
        self.revision = revision

    def run_cmd(self, cmd, cwd=None, stdout=subprocess.PIPE, fatal=None):
        logging.debug("COMMAND: %s" % cmd)
        stderr = subprocess.PIPE
        if stdout == subprocess.PIPE:
            stderr = subprocess.STDOUT
        proc = subprocess.Popen(cmd,
                                shell=False,
                                stdout=stdout,
                                stderr=stderr,
                                cwd=cwd)
        output = proc.communicate()[0]
        if isinstance(output, bytes):
            output = output.decode('UTF-8')
        logging.debug("RESULT(%d): %s", proc.returncode, repr(output))
        if fatal and proc.returncode != 0:
            print("ERROR: " + fatal + " failed: ", output)
            sys.exit(proc.returncode)
        return (proc.returncode, output)

    def clone(self):
        cmd = [ 'git', 'clone', self.url, self.outdir ]
        os.environ['LANG'] = "C"
        self.run_cmd(cmd, fatal="git clone")

    def cpio_directory(self, directory):
        logging.info("create archivefile for %s", directory)
        cmd = [ download_assets, '--create-cpio', '--', directory ]
        archivefile = open(directory + '.obscpio', 'w')
        self.run_cmd(cmd, stdout=archivefile, fatal="cpio creation")
        archivefile.close()

    def cpio_specials(self, specials):
        if not specials:
            return
        logging.info("create archivefile for specials")
        cmd = [ download_assets, '--create-cpio', '--', '.' ] + specials
        archivefile = open('build.specials.obscpio', 'w')
        self.run_cmd(cmd, stdout=archivefile, fatal="cpio creation")
        archivefile.close()

    def cpio_directories(self):
        logging.debug("walk via %s", self.outdir)
        os.chdir(self.outdir)
        listing = sorted(os.listdir("."))
        specials = []
        for name in listing:
            if name == '.git':
                # we do not store git meta data service side atm to avoid bloat storage
                # however, this will break some builds, so we will need an opt-out in future
                shutil.rmtree(name)
                continue
            if name[0:1] == '.':
                specials.append(name)
                continue
            if os.path.islink(name):
                specials.append(name)
                continue
            if os.path.isdir(name):
                logging.info("CPIO %s ", name)
                self.cpio_directory(name)
                shutil.rmtree(name)
        if specials:
            self.cpio_specials(specials)
            for name in specials:
                if os.path.isdir(name):
                    shutil.rmtree(name)
                else:
                    os.unlink(name)

    def get_assets(self):
        logging.info("downloading assets")
        cmd = [ download_assets, '--', self.outdir ]
        self.run_cmd(cmd, fatal="asset download")

    def copyfile(self, src, dst):
        cmd = [ 'cp', '-af', self.outdir + "/" + src, self.outdir + "/" + dst ]
        self.run_cmd(cmd, fatal="file copy")

    def export_debian_files(self):
        if os.path.isfile(self.outdir + "/debian/control") and \
                not os.path.isfile(self.outdir + "/debian.control"):
            self.copyfile("debian/control", "debian.control")
        if os.path.isfile(self.outdir + "/debian/changelog") and \
                not os.path.isfile(self.outdir + "/debian.changelog"):
            self.copyfile("debian/changelog", "debian.changelog")

    def get_debian_origtar(self):
        cmd = [ export_debian_orig_from_git, self.outdir ]
        if os.path.isfile(self.outdir + "/debian/control"):
            logging.info("exporting debian origtar")
            self.run_cmd(cmd, fatal="debian origtar export")

    def generate_package_xml_files(self, baseurl):
        logging.debug("walk via %s", self.outdir)
        os.chdir(self.outdir)
        listing = sorted(os.listdir("."))
        regexp =  re.compile(r"^[a-zA-Z0-9\.\-\_\+]*$");
        for name in listing:
            # FIXME: add support for git submodules
            if os.path.isdir(name):
               shutil.rmtree(name)
               if not regexp.match(name):
                 logging.warn("directory name contains invalid char: " + name)
                 continue
               xmlfile = open(name + '.xml', 'w')
               xmlfile.write('<package name="' + name + '">\n')
               xmlfile.write('  <scmsync>' + baseurl + "?subdir=" + name + '</scmsync>>\n')
               xmlfile.write('</package>\n')
               xmlfile.close()
            else:
               if name != "_config":
                   os.unlink(name)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Open Build Service source service for managing packaging files in git.'
        'This is a special service for OBS git integration.')
    parser.add_argument('--outdir', required=True,
                        help='output directory for modified sources')
    parser.add_argument('--url',
                        help='REQUIRED: url to git repository')
    parser.add_argument('--projectmode',
                        help='just return the package list based on the subdirectories')
    parser.add_argument('--debug',
                        help='verbose debug mode')
    args = vars(parser.parse_args())

    url = args['url']
    outdir = args['outdir']
    project_mode = args['projectmode']

    if not outdir:
        print("no outdir specified")
        sys.exit(-1)

    if not url:
        print("no url specified")
        sys.exit(-1)

    if args['debug']:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.debug("Running in debug mode")

    # workflow
    obsgit = ObsGit(outdir, url)
    obsgit.clone()
    if project_mode == 'true' or project_mode == '1':
        obsgit.generate_package_xml_files(url)
        sys.exit(0)

    obsgit.get_assets()
    obsgit.get_debian_origtar()
    if pack_directories:
        obsgit.export_debian_files()
        obsgit.cpio_directories()

