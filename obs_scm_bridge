#!/usr/bin/python3
# -*- coding: utf-8 -*-

# scm (only git atm) cloning and packaging for Open Build Service
# 
# (C) 2021 by Adrian Schr√∂ter <adrian@suse.de>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# See http://www.gnu.org/licenses/gpl-2.0.html for full license text.

import argparse
import os
import shutil
import sys
import logging
import subprocess

if os.environ.get('DEBUG_SET_VERSION') == "1":
    logging.getLogger().setLevel(logging.DEBUG)

outdir = None


class ObsGit(object):
    def __init__(self, outdir, url, revision=None):
        self.outdir   = outdir
        self.url      = url
        self.revision = revision

    def run_cmd(self, cmd, cwd=None):
        logging.debug("COMMAND: %s" % cmd)
        proc = subprocess.Popen(cmd,
                                shell=False,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT,
                                cwd=cwd)
        output = proc.communicate()[0]
        if isinstance(output, bytes):
            output = output.decode('UTF-8')
        logging.debug("RESULT(%d): %s", proc.returncode, repr(output))
        return (proc.returncode, output)

    def clone(self):
        clone = [ 'git', 'clone', self.url, self.outdir ]
        os.environ['LANG'] = "C"
        rcode, output = self.run_cmd(clone)
        if rcode != 0:
            print("ERROR: git clone failed: ", output)
            sys.exit(rcode)

    def cpio_directory(self, directory):
        cmd = [ 'cpio', '--create', '--format=newc', '--owner', ':0', '--reproducible' ]
        logging.info("create archivefile for %s", directory)
        archivefile = open(directory + '.obscpio', 'w')

        proc = subprocess.Popen(
            cmd,
            shell  = False,
            stdin  = subprocess.PIPE,
            stdout = archivefile
        )

        for root, dirs, files in os.walk(directory, topdown=False):
            for name in dirs:
                proc.stdin.write(os.path.join(root, name).encode('UTF-8', 'surrogateescape'))
                proc.stdin.write(b"\n")

            for name in files:
                proc.stdin.write(os.path.join(root, name).encode('UTF-8', 'surrogateescape'))
                proc.stdin.write(b"\n")

        proc.stdin.close()
        rcode = proc.wait()
        if rcode != 0:
            raise SystemExit("Creating the cpio archive failed!")
        archivefile.close()

    def cpio_directories(self):
        logging.debug("walk via %s", self.outdir)
        os.chdir(self.outdir)
        listing = os.listdir(".")
        for name in listing:
            if name == '.git':
                # we do not store git meta data service side atm to avoid bloat storage
                # however, this will break some builds, so we will need an opt-out in future
                shutil.rmtree(name)
                continue
            if name[0:1] == '.':
                # no dot directories by default
                continue
            if os.path.isdir(name):
                logging.info("CPIO %s ", name)
                self.cpio_directory(name)
                shutil.rmtree(name)

    def get_assets(self):
        clone = [ '/usr/lib/obs/service/download_assets', self.outdir ]
        rcode, output = self.run_cmd(clone)
        if rcode != 0:
            print("ERROR: asset download failed: ", output)
            sys.exit(rcode)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Open Build Service source service for managing packaging files in git.'
        'This is a special service for OBS git integration.')
    parser.add_argument('--outdir', required=True,
                        help='output directory for modified sources')
    parser.add_argument('--url',
                        help='REQUIRED: url to git repository')
    parser.add_argument('--revision',
                        help='commit, tag or branch to use')
    parser.add_argument('--debug',
                        help='verbose debug mode')
    args = vars(parser.parse_args())

    url = args['url']
    outdir = args['outdir']
    revision = args['revision']


    if not outdir:
        print("no outdir specified")
        sys.exit(-1)

    if not url:
        print("no url specified")
        sys.exit(-1)

    if args['debug']:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.debug("Running in debug mode")

    # workflow
    obsgit = ObsGit(outdir, url)
    obsgit.clone()
    obsgit.get_assets()
    if os.environ.get('OBS_SERVICE_DAEMON'):
        obsgit.cpio_directories()

