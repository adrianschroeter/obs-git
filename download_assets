#!/usr/bin/perl
################################################################
#
# Copyright (c) 2021 SUSE LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################

BEGIN {
  if (!$::ENV{'BUILD_DIR'} && $0 ne '-' && $0 ne '-e' && -e $0 && ! -e '/etc/build.conf') {
    use Cwd ();
    my $p = Cwd::abs_path($0);
    $::ENV{'BUILD_DIR'} = $p if $p =~ s/\/[^\/]+$// && $p ne '/usr/lib/build' && -d "$p/PBuild";
  }
  unshift @INC, ($::ENV{'BUILD_DIR'} && ! -e '/etc/build.conf' ? $::ENV{'BUILD_DIR'} : '/usr/lib/build');
}

use strict;

use Data::Dumper;
use POSIX;
use Cwd ();

use Build;

use PBuild::AssetMgr;
use PBuild::Source;

# FIXME: all code should become arch agnostic
my $arch = 'noarch';
my $global_asset_dir;

my @assetsurls = (
  'fedpkg@https://pkgs.fedoraproject.org/repo/pkgs',
);

my $bconf = Build::read_config($arch);
for my $dir (@ARGV) {
  my ($files, $asset_files) = PBuild::Source::list_package($dir);
  my @assets;
  my $assetdir = $global_asset_dir || "$dir/.assets";
  my $p = {
    'pkg' => "_me",
    'dir' => $dir,
    'files' => $files,
    'srcmd5' => PBuild::Source::calc_srcmd5($files),
  };
  $p->{'asset_files'} = $asset_files if %{$asset_files || {}};
 
  my $assetmgr = PBuild::AssetMgr::create($assetdir);
  $assetmgr->add_assetshandler($_) for @assetsurls;

  for my $file (sort keys %$files) {
    if ($file eq 'sources') {
      $p->{'buildtype'} = '';
      $assetmgr->find_assets($p, $arch);
      next;
    }
    next unless $file eq 'PKGBUILD' || $file =~ /\.(?:spec|dsc|kiwi)/;
    my $bt = Build::recipe2buildtype($file);
    next unless $bt;
    $p->{'buildtype'} = $bt;
    my $d;
    eval { $d = Build::parse_typed($bconf, "$dir/$file", $bt) };
    $p->{'remoteassets'} = $d->{'remoteassets'} if $d && $d->{'remoteassets'};
    $assetmgr->find_assets($p, $arch);
  }
  $assetmgr->getremoteassets($p);
  $assetmgr->copy_assets($p, $dir);
}

